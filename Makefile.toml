[config]
skip_core_tasks = true

[env]
APP_ID = "org.sonusmix.Sonusmix"

[tasks.default]
alias = "build"


[tasks.clean]
run_task = { name = [
    "cargo-clean",
    "clean-icons",
    "clean-flatpak",
    "clean-appimage",
] }

[tasks.cargo-clean]
command = "cargo"
args = ["clean"]

[tasks.clean-icons]
command = "rm"
args = ["-rf", "./assets/icons"]

[tasks.clean-flatpak]
command = "rm"
args = ["-rf", ".flatpak-builder", "./flatpak-builddir", "./flatpak-repo"]

[tasks.clean-appimage]
command = "rm"
args = [
    "-rf",
    "AppDir",
    "appimagekit-bin",
    "${APP_ID}-${CARGO_MAKE_CRATE_VERSION}.AppImage",
]


[tasks.build]
condition = { files_modified = { input = [
    "./Cargo.toml",
    "./src/**/*.rs",
    "./assets/**/*",
], output = [
    "./target/release/sonusmix",
] } }
command = "cargo"
args = ["build", "--release"]

[tasks.run]
command = "./target/release/sonusmix"
dependencies = ["build"]


[tasks.build-icons]
condition = { files_modified = { input = [
    "./assets/sonusmix.svg",
], output = [
    "./assets/icons/**/*",
] } }
env = { "INPUT_SVG" = "./assets/sonusmix.svg", "ICON_SIZES" = "512 256 128 64 48 32 24 16" }
script = '''
rm -r ./assets/icons | true
mkdir -p ./assets/icons/hicolor/scalable/apps
cp "${INPUT_SVG}" "./assets/icons/hicolor/scalable/apps/${APP_ID}.svg"
for SIZE in ${ICON_SIZES}; do
    ICON_DIR="./assets/icons/hicolor/${SIZE}x${SIZE}/apps/"
    mkdir -p "$ICON_DIR"
    resvg -w "$SIZE" -h "$SIZE" "${INPUT_SVG}" "$ICON_DIR/${APP_ID}.png"
done
'''


[tasks.build-flatpak]
condition = { files_modified = { input = [
    "./Cargo.toml",
    "./src/**/*.rs",
    "./assets/**/*",
    "./org.sonusmix.Sonusmix.json",
], output = [
    "./flatpak-repo/**/*",
] } }
# Does not depend on build, the build step is included in the flatpak manifest
dependencies = ["build-icons"]
command = "flatpak-builder"
args = [
    "--force-clean",
    "--install-deps-from=flathub",
    "--repo=flatpak-repo",
    "./flatpak-builddir",
    "./org.sonusmix.Sonusmix.json",
]

[tasks.install-flatpak]
command = "flatpak"
dependencies = ["build-flatpak"]
args = [
    "install",
    "--user",
    "--reinstall",
    "./flatpak-repo",
    "org.sonusmix.Sonusmix",
]

[tasks.appimagekit-path]
# Add appimagekit dir to PATH
env = { "PATH" = "${PATH}:${CARGO_MAKE_WORKING_DIRECTORY}/appimagekit-bin" }

[tasks.appimagetool]
# Download appimagetool and add it to PATH if it's not already available
condition_script = ['[ ! -x "$(command -v appimagetool)" ]']
dependencies = ["appimagekit-path"]
install_script = '''
if [ ! -f appimagekit-bin/appimagetool ]; then
    echo "downloading appimagetool AppImage"

    mkdir appimagekit-bin | true
    wget -O appimagekit-bin/appimagetool \
        "https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage"
    chmod +x appimagekit-bin/appimagetool
fi
'''

[tasks.appimage-builder]
# Download appimage-builder and add it to PATH if it's not already available
condition_script = ['[ ! -x "$(command -v appimage-builder)" ]']
dependencies = ["appimagekit-path"]
install_script = '''
if [ ! -f appimagekit-bin/appimage-builder ]; then
    echo "downloading appimage-builder AppImage"

    mkdir appimagekit-bin | true
    wget -O appimagekit-bin/appimage-builder \
        "https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage"
    chmod +x appimagekit-bin/appimage-builder
fi
'''

[tasks.build-appimage]
dependencies = ["build-icons", "appimagetool", "build"]
script = '''
rm -rf AppDir | true

# Copy binary
mkdir -p ./AppDir/usr/bin
cp ./target/release/sonusmix ./AppDir/usr/bin/sonusmix
# cp ./assets/load-and-run-sonusmix.sh ./AppDir/usr/bin/sonusmix

# Copy Libraries
mkdir ./AppDir/usr/lib
for LIB_DIR in $(pkg-config --libs-only-L gdk-pixbuf-2.0 | sed 's/-L\//\//g'); do
    cp -r --no-preserve=mode $LIB_DIR/* ./AppDir/usr/lib
done
for LIB_DIR in $(pkg-config --libs-only-L gtk4 | sed 's/-L\//\//g'); do
    cp -r --no-preserve=mode $LIB_DIR/* ./AppDir/usr/lib
done
for LIB_DIR in $(pkg-config --libs-only-L librsvg-2.0 | sed 's/-L\//\//g'); do
    cp -r --no-preserve=mode $LIB_DIR/* ./AppDir/usr/lib
done
lddtree --copy-to-tree ./AppDir --bindir=/trash --libdir=/usr/lib target/release/sonusmix
chmod -R 755 ./AppDir/usr/lib/*
rm -rf ./AppDir/trash
# Remove the Pipewire lib as the one from the host should be used instead. The Pipewire dylibs are
# loaded dynamically and so they don't need to be the exact same version.
rm ./AppDir/usr/lib/libpipewire-0.3.so.0

# Copy gdk-pixbuf-query-loaders
cp "$(command -v gdk-pixbuf-query-loaders)" ./AppDir/usr/bin/

# Copy AppRun
cp ./assets/AppRun ./AppDir/

# Copy desktop file
mkdir -p ./AppDir/usr/share/applications
cp "./assets/${APP_ID}.desktop" ./AppDir/usr/share/applications/
ln -s "usr/share/applications/${APP_ID}.desktop" ./AppDir/

# Copy icons
cp -r ./assets/icons ./AppDir/usr/share/
ln -s "usr/share/icons/hicolor/512x512/apps/${APP_ID}.png" ./AppDir/.DirIcon
ln -s "usr/share/icons/hicolor/scalable/apps/${APP_ID}.svg" ./AppDir/

# appimagetool has a weird bug with SOURCE_DATE_EPOCH
unset SOURCE_DATE_EPOCH

# Create AppImage
appimagetool ./AppDir "${APP_ID}-${CARGO_MAKE_CRATE_VERSION}.AppImage"
'''
